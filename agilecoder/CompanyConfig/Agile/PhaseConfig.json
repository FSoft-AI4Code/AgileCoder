{
  "DemandAnalysis": {
    "assistant_role_name": "Product Owner",
    "user_role_name": "User",
    "phase_prompt": [
      "AgileCoder has made products in the following form before:",
      "Image: can present information in line chart, bar chart, flow chart, cloud chart, Gantt chart, etc.",
      "Document: can present information via .docx files.",
      "PowerPoint: can present information via .pptx files.",
      "Excel: can present information via .xlsx files.",
      "PDF: can present information via .pdf files.",
      "Website: can present personal resume, tutorial, products, or ideas, via .html files.",
      "Application: can implement visualized game, software, tool, etc, via python.",
      "Dashboard: can display a panel visualizing real-time information.",
      "Mind Map: can represent ideas, with related concepts arranged around a core concept.",
      "As the {assistant_role}, to satisfy the new user's demand and the product should be realizable, you should keep discussing with me to decide which product modality do we want the product to be?",
      "Note that we must ONLY discuss the product modality and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion by replying with only one line, which starts with a single word <INFO>, followed by our final product modality without any other words, e.g., \"<INFO> PowerPoint\"."
    ]
  },
  "LanguageChoose": {
    "assistant_role_name": "Product Owner",
    "user_role_name": "User",
    "phase_prompt": [
      "According to the new user's task and the modality listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "We have decided to complete the task through a executable software implemented via a programming language. ",
      "As the {assistant_role}, to satisfy the new user's demand and make the software realizable, you should propose a concrete programming language. If python can complete this task via Python, please answer Python; otherwise, answer another programming language (e.g., Java, C++, etc,).",
      "Note that we must ONLY discuss the target programming language and do not discuss anything else! Once we all have expressed our opinion(s) and agree with the results of the discussion unanimously, any of us must actively terminate the discussion and conclude the best programming language we have discussed without any other words or reasons, return only one line using the format: \"<INFO> *\" where \"*\" represents a programming language."
    ]
  },
  "ProductBacklogCreating": {
    "assistant_role_name": "Product Owner",
    "user_role_name": "User",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "We have decided to complete the task through a executable software with multiple files implemented via {language}. As the {assistant_role}, to satisfy the user's demands, you must write the Product Backlog and the corresponding Acceptance Criteria.",
      "Think step by step and reason yourself to the right decisions to make sure we get it right.",
      "You must also prioritize product backlog items with the important items appearing at the first.",
      "Your answer must adhere to the following format:",
      "Product Backlog:",
      "PRODUCT_BACKLOG",
      "where PRODUCT_BACKLOG is the product backlog for the user's task.",
      "Importantly, you must consider the skills of the development team to write the feasible product backlog. Advanced features like sounds can not be implemented properly."
    ]
  },
  "ProductBacklogReview": {
    "assistant_role_name": "Development Team",
    "user_role_name": "Product Owner",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "We have decided to complete the task through a executable software with multiple files implemented via {language}. As the {assistant_role}, to satisfy the user's demands, I suggest the following product backlog:",
      "Product backlog:\n\"{plain_product_backlog}\"",
      "As the development team, you should review and provide useful feedback about tasks to make the software run flawlessly by obeying the regulations below",
      "1) considering the proficiency of the members, all the tasks are feasible and finished by at least one member",
      "2) the product backlog must not incorporate enhanced features like AI, animations and sound effects unless explicitly specified in the user's task.",
      "Now, you should check the above regulations one by one and review the product backlog in detail, propose one comment with the highest priority about the product backlog, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the product backlog is perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
    ]
  },
  "ProductBacklogModification": {
    "assistant_role_name": "Product Owner",
    "user_role_name": "Development Team",
    "phase_prompt": [
      "According to the new user's task, our software designs, product backlog and comments listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Product backlog:\n\"{plain_product_backlog}\"",
      "Comments on Product backlog:",
      "\"{product_backlog_comments}\"",
      "We have decided to complete the task through a executable software with multiple files implemented via {language}.",
      "As the {assistant_role}, to satisfy the user's demand and make the software executive and robust, and ensure that the product backlog is feasible and can be accomplished, you should modify corresponding product backlog according to the comments. Then, output the full and complete product backlog with all based on the comments. Return the product backlog strictly following the required format."
    ]
  },
  "SprintBacklogReview": {
    "assistant_role_name": "Development Team",
    "user_role_name": "Product Owner",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Product backlog:\n\"{plain_product_backlog}\"",
      "We have decided to incorporate Agile Scrum with multiple sprints to complete the task through a executable software with multiple files implemented via {language}. As the {user_role}, to satisfy the user's demands, I suggest the following sprint goals and sprint backlog:",
      "Sprint goals:\n\"{current_sprint_goals}\"",
      "Sprint backlog:\n\"{current_programming_task}\"",
      "As the {assistant_role}, you should review and provide useful feedback about sprint goals and sprint backlog to make the software run flawlessly by obeying the regulations below",
      "1) considering the proficiency of the members, all the tasks are feasible and finished by at least one member,",
      "2) the sprint backlog must not incorporate enhanced features like AI, animations and sound effects unless explicitly specified in the user's task,",
      "3) all the items in sprint backlog are from the product backlog.",
      "Now, you should check the above regulations one by one and review the sprint goals and sprint backlog in detail, propose one comment with the highest priority about them, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the sprint goals and sprint backlog are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
    ]
  },
  "SprintBacklogModification": {
    "assistant_role_name": "Product Owner",
    "user_role_name": "Development Team",
    "phase_prompt": [
      "According to the new user's task, our software designs, product backlog, sprint goals, sprint backlog and comments listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Product backlog:\n\"{plain_product_backlog}\"",
      "Sprint goals:\n\"{current_sprint_goals}\"",
      "Sprint backlog:\n\"{current_programming_task}\"",
      "Comments on sprint goals and sprint backlog:",
      "\"{sprint_backlog_comments}\"",
      "We have decided to complete the task through a executable software with multiple files implemented via {language}.",
      "As the {assistant_role}, to satisfy the user's demand and make the software executive and robust, and ensure that the sprint goals and sprint backlog are feasible and can be accomplished, you should modify corresponding product backlog according to the comments. Then, output the full and complete product backlog with all based on the comments. Return the output strictly following the required format:",
      "Sprint Goals:",
      "SPRINT_GOALS",
      "Sprint Backlog:",
      "BACKLOG_DETAILS",
      "where SPRINT_GOALS are the goals of the sprint, and BACKLOG_DETAILS is the sprint backlog"
    ]
  },
  "SprintBacklogCreating": {
    "assistant_role_name": "Product Owner",
    "user_role_name": "Development Team",
    "phase_prompt": [
      "According to the user's task, our software designs and product backlog listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Product backlog:\n\"{plain_product_backlog}\"",
      "We have decided to complete the task through a executable software with multiple files implemented via {language}. As the {assistant_role}, to satisfy the user's demands, you must create the first sprint backlog and the goals of this sprint from the product backlog.",
      "Think step by step and reason yourself to the right decisions to make sure we get it right.",
      "Your answer only has a single sprint backlog and strictly obeys the following format:",
      "Sprint Goals:",
      "SPRINT_GOALS",
      "Sprint Backlog:",
      "BACKLOG_DETAILS",
      "where SPRINT_GOALS are the goals of the sprint, and BACKLOG_DETAILS is the sprint backlog whose items are from the product backlog.",
      "You must ensure that SPRINT_GOALS and BACKLOG_DETAILS must not be empty and BACKLOG_DETAILS aligns with SPRINT_GOALS.",
      "As the Product Owner, you must adhere to the following regulations:",
      "1) considering the proficiency of the members, all the tasks are feasible and finished by at least one member,",
      "2) the sprint backlog must not include enhanced features like AI, animations and sound effects,",
      "3) the sprint backlog chosen sets the stage for next sprints.",
      "Note that the product backlog is divided into at least 2 sprints and each sprint should contain enough workload."
    ]
  },
  "NextSprintBacklogCreating": {
    "assistant_role_name": "Product Owner",
    "user_role_name": "Development Team",
    "phase_prompt": [
      "According to the user's task, our software designs, product backlog listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Product backlog:\n\"{plain_product_backlog}\"",
      "We have decided to complete the task through a executable software with multiple files implemented via {language}. We are using Agile Scrum for software development. We finished some sprints with done tasks and undone tasks as below:",
      "Done tasks: ",
      "{all_done_tasks}",
      "Undone tasks:",
      "{all_undone_tasks}",
      "As the {assistant_role}, to satisfy the user's demands, you must create the a next sprint backlog and the goals of this sprint from the product backlog, done tasks and undone tasks.",
      "You should meticulously consider undone tasks when creating the next sprint.",
      "Think step by step and reason yourself to the right decisions to make sure we get it right.",
      "Importantly, when done tasks are exactly the product backlog, just return a single line with the content: \"<INFO> DONE.\" and do nothing.",
      "You must create a next sprint backlog and strictly obeys the following format:",
      "Sprint Goals:",
      "SPRINT_GOALS",
      "Sprint Backlog:",
      "BACKLOG_DETAILS",
      "where SPRINT_GOALS are the goals of the sprint, and BACKLOG_DETAILS is the sprint backlog whose items are from the product backlog, meaning that you must not devise new tasks or non-practical features.",
      "You must ensure that SPRINT_GOALS and BACKLOG_DETAILS must not be empty and BACKLOG_DETAILS aligns with SPRINT_GOALS.",
      "As the Product Owner, you must adhere to the following regulations:",
      "1) considering the proficiency of the members, all the tasks are feasible and finished by at least one member,",
      "2) the sprint backlog must not include enhanced features like AI, animations and sound effects,",
      "3) the sprint backlog chosen sets the stage for next sprints.",
      "Note that the product backlog is divided into multiple sprints and each sprint should contain enough workload."
      
    ]
  },
  "SprintReview": {
    "assistant_role_name": "Product Owner",
    "user_role_name": "Development Team",
    "phase_prompt": [
      "According to the user's task, our software designs, the sprint goals, the sprint backlog, our developed source code, and corresponding test reports and summaries are listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Sprint goals:\n\"{current_sprint_goals}\"",
      "Sprint backlog:\n\"{current_programming_task}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "Error Summary of Test Reports:",
      "\"{error_summary}\"",
      "To satisfy the sprint goals, we have decided to complete the sprint backlog. As the {assistant_role}, you implemented source code and tested source code, then you wrote test reports and error summaries.",
      "Now is at the end of the sprint, you should review all the work, what has been done, what has not.",
      "You should answer according to the following format:",
      "Done Work:",
      "DONE_WORK",
      "Undone Work:",
      "UNDONE_WORK",
      "where DONE_WORK are carefully completed and tested works, UNDONE_WORK includes unfinished works or existing bugs."
    ]
  },
  
  "RolesEngagement": {
    "assistant_role_name": "Development Team",
    "user_role_name": "Product Owner",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Sprint goals:\n\"{current_sprint_goals}\"",
      "Sprint backlog:\n\"{plain_sprint_backlog}\"",
      "To satisfy the sprint goals, we have decided to complete the task through a executable software with multiple files implemented via {language}. As the {assistant_role}, to satisfy the user's demands and the sprint goals, you must assess the technical and skill requirements of each task and determine which team members are best suited for the work. You also need to prioritize tasks with the important tasks appearing first.",
      "Think step by step and reason yourself to the right decisions to make sure we get it right.",
      "Your answer includes many lines where each separate line strictly obeys the following format:",
      "Backlog Item: BACKLOG_ITEM - Member: MEMBER",
      "where BACKLOG_ITEM is a sprint backlog item from the sprint backlog and MEMBER in the same line represents the person doing this task.",
      "Note that each backlog item is just assigned to a member, so you should choose the most suitable person."
    ]
  },
  "Coding": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Product Owner",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "User's task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Sprint goals:\n\"{current_sprint_goals}\"",
      "Sprint backlog:\n\"{current_programming_task}\"",
      "To satisfy the sprint goals, we have decided to complete the sprint backlog through a executable software with multiple files implemented via {language}. As the {assistant_role}, to satisfy the user's demands and the sprint goals, you should accomplish the sprint backlog by writing one or multiple files and make sure that every detail of the architecture is, in the end, implemented as code. {gui}",
      "Think step by step and reason yourself to the right decisions to make sure we get it right.",
      "You will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.",
      "Then you will output the content of each file including complete code. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "You will start with the \"main\" file, then go to the ones that are imported by that file, and so on.",
      "Please note that the code should be fully functional. Ensure to implement all functions. No placeholders (such as 'pass' in Python)."
    ]
  },
  "CodeFormatting": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the code, required code format and comments below:",
      "Codes:",
      "\"{codes}\"",
      "Required Code Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "where \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code.",
      "Comments:",
      "The code above contains enough values for the required fields: \"FILENAME\", \"LANGUAGE\", \"DOCSTRING\" and  \"CODE\". However, they are not written to follow the format properly. You should rearrange them to satisfy the requirement.",
      "As the {assistant_role}, to make the code satisfy the required format, you should modify corresponding codes according to the comments and then return all codes strictly following the required format.",
      "Please note that you are not allowed to write new code or change the values of any fields, meaning that the new code is only different from the original code in terms of the format."
    ]
  },
  "InheritCoding": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Product Owner",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "User's task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "To accomplish the user's task, we completed some sprints through a executable software with multiple files implemented via {language} and get the source code below:",
      "Codes:",
      "\"{codes}\"",
      "Here is the details of the current sprint:",
      "Sprint goals:\n\"{current_sprint_goals}\"",
      "Sprint backlog:\n\"{current_programming_task}\"",
      "As the {assistant_role}, to satisfy the user's demands and the sprint goals, you should accomplish the sprint backlog by inheriting existing source code and writing one or multiple files and make sure that every detail of the architecture is, in the end, implemented as code. {gui}",
      "Think step by step and reason yourself to the right decisions to make sure we get it right.",
      "You will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.",
      "Then you will output the content of each file including complete code. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "You will start with the \"main\" file, then go to the ones that are imported by that file, and so on.",
      "Please note that the code should be fully functional. Ensure to implement all functions. No placeholders (such as 'pass' in Python)."
    ]
  },
  "ArtDesign": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Task: \"{task}\".",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and equip the software with a beautiful graphical user interface (GUI), we will discuss and design many decorative images for GUI decoration. Now, we keep discussing the GUI beautification by listing some functionally independent elements in GUI that are being considered to be decorated by different pictures. For example, ten digits (0-9) in a calculator are functionally independent.",
      "To answer, use the format: \" FILENAME.png: DESCRIPTION\" where \"FILENAME\" is the filename of the image and \"DESCRIPTION\" denotes the detailed description of the independent elements. For example:",
      "'''",
      "button_1.png: The button with the number \"1\" on it.",
      "button_multiply.png: The button with the multiplication symbol (\"*\") on it.",
      "background.png: the background color to decorate the Go game",
      "'''",
      "Now, list all functionally independent elements as much as possible."
    ]
  },
  "ArtIntegration": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Creative Officer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Task: \"{task}\".",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and equip the software with a beautiful graphical user interface (GUI), you will incorporate our designed images for GUI decoration. Here are some ready-made high-quality pictures and corresponding descriptions:",
      "{images}",
      "Note that the designed images have a fixed size of 256x256 pixels and the images are located in the same directory as all the Python files; please dynamically scaling these images according to the size of GUI, and use \"self.*\" to avoid displaying-related problems caused by automatic garbage collection. For example:",
      "```",
      "self.image = ImageTk.PhotoImage(Image.open(\"./image.png\").resize((50, 50)))",
      "```",
      "Now, use some or all of the pictures into the GUI to make it more beautiful and creative. Output codes strictly following the required format mentioned above."
    ]
  },
  "CodeComplete": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Chief Technology Officer",
    "phase_prompt": [
      "According to the new user's task and our software designs listed below: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes:",
      "\"{codes}\"",
      "Unimplemented File:",
      "\"{unimplemented_file}\"",
      "In our software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the complete function of our developed software, you have to implement all methods in the {unimplemented_file} file which contains a unimplemented class. Now, implement all methods of the {unimplemented_file} and all other codes needed, then output the fully implemented codes, strictly following the required format."
    ]
  },
  "CodeReviewComment": {
    "assistant_role_name": "Code Reviewer",
    "user_role_name": "Programmer",
    "phase_prompt": [
      "According to the user's task, the sprint backlog and our software designs: ",
      "User's task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Sprint goals:\n\"{current_sprint_goals}\"",
      "Sprint backlog:\n\"{current_programming_task}\"",
      "Codes:",
      "\"{codes}\"",
      "Assets' paths:",
      "\"{paths}\"",
      "As the {assistant_role}, to make the software directly operable without further coding, AgileCoder have formulated the following regulations:",
      "1) all referenced classes should be imported;",
      "2) all methods should be implemented;",
      "3) all methods need to have the necessary comments;",
      "4) no potential bugs;",
      "5) The entire project conforms to the tasks proposed by the user;",
      "6) To satisfy the sprint goals, the code implements all the tasks in the sprint backlog;",
      "7) Make sure the used assets like images must exist and be referred properly",
      "8) Ensure that the colors used are easy on the eye",
      "9) prohibitively put code in a try-exception in the main.py",
      "10) most importantly, do not only check the errors in the code, but also the logic of code. Make sure that user can interact with generated software without losing any feature in the requirement;",
      "Now, you should check the above regulations one by one and review the codes in detail, propose one comment with the highest priority about the codes, and give me instructions on how to fix. Tell me your comment with the highest priority and corresponding suggestions on revision. If the codes are perfect and you have no comment on them, return only one line like \"<INFO> Finished\"."
    ]
  },
  "CodeReviewModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the user's task, our designed product modality, languages, and the sprint backlog, our developed first-edition source codes are listed below: ",
      "User's task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Sprint goals:\n\"{current_sprint_goals}\"",
      "Sprint backlog:\n\"{current_programming_task}\"",
      "Codes: ",
      "\"{codes}\"",
      "Comments on Codes:",
      "\"{comments}\"",
      "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the user's demand and the sprint goals, make the software creative, executive and robust, and ensure that the code resolves the sprint backlog, you should modify corresponding codes according to the comments. Then, output the full and complete codes with all bugs fixed based on the comments. Return all codes strictly following the required format."
    ]
  },
  "CodeReviewHuman": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Code Reviewer",
    "phase_prompt": [
      "According to the user's task, our designed product modality, the sprint goals and the sprint backlog, our developed first-edition source codes are listed below: ",
      "User's task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Sprint goals:\n\"{current_sprint_goals}\"",
      "Sprint backlog:\n\"{current_programming_task}\"",
      "Codes: ",
      "\"{codes}\"",
      "Comments on Codes:",
      "\"{comments}\"",
      "In the software, each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code. Format:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy new user's demand and the sprint goals, make the software creative, executive and robust, and ensure that the code resolves the sprint backlog, you should modify corresponding codes according to the comments. Then, output the fixed codes strictly following the required format."
    ]
  },
  "TestErrorSummary": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "According to my test reports, please locate and summarize the bugs that cause the problem."
    ]
  },
  "TestModification": {
    "assistant_role_name": "Programmer",
    "user_role_name": "Software Test Engineer",
    "phase_prompt": [
      "Our developed source codes and corresponding test reports are listed below: ",
      "Programming Language: \"{language}\"",
      "Source Codes:",
      "\"{codes}\"",
      "Test Reports of Source Codes:",
      "\"{test_reports}\"",
      "Error Summary of Test Reports:",
      "\"{error_summary}\"",
      "Note that each file must strictly follow a markdown code block format, where the following tokens must be replaced such that \"FILENAME\" is the lowercase file name including the file extension, \"LANGUAGE\" in the programming language, \"DOCSTRING\" is a string literal specified in source code that is used to document a specific segment of code, and \"CODE\" is the original code:",
      "FILENAME",
      "```LANGUAGE",
      "'''",
      "DOCSTRING",
      "'''",
      "CODE",
      "```",
      "As the {assistant_role}, to satisfy the new user's demand and make the software execute smoothly and robustly, you should modify the codes based on the error summary.",
      "Now, use the format exemplified above and modify the problematic codes based on the error summary. If you cannot find the assets from the existing paths, you should consider remove relevant code and features. Output the codes that you fixed based on the test reported and corresponding explanations (strictly follow the format defined above, including FILENAME, LANGUAGE, DOCSTRING and CODE; incomplete \"TODO\" codes are strictly prohibited). If no bugs are reported, please return only one line like \"<INFO> Finished\"."
    ]
  },
  "EnvironmentDoc": {
    "assistant_role_name": "Development Team",
    "user_role_name": "Product Owner",
    "phase_prompt": [
      "The new user's task and our developed codes are listed: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes: ",
      "\"{codes}\"",
      "As the {assistant_role}, you should write a requirements.txt file, which is commonly used in Python projects to specify the dependencies or packages required for the project to run properly. It serves as a way to document and manage the project's dependencies in a standardized format. For example:",
      "requirements.txt",
      "```",
      "numpy==1.19.2",
      "pandas>=1.1.4",
      "```",
      "According to the codes and file format listed above, write a requirements.txt file to specify the dependencies or packages required for the project to run properly."
    ]
  },
  "Manual": {
    "assistant_role_name": "Development Team",
    "user_role_name": "Product Owner",
    "phase_prompt": [
      "The new user's task, our developed codes and required dependencies are listed: ",
      "Task: \"{task}\".",
      "Modality: \"{modality}\".",
      "Programming Language: \"{language}\"",
      "Codes: ",
      "\"{codes}\"",
      "Requirements:",
      "\"{requirements}\"",
      "As the {assistant_role}, by using Markdown, you should write a manual.md file which is a detailed user manual to use the software, including introducing main functions of the software, how to install environment dependencies and how to use/play it. For example:",
      "manual.md",
      "```",
      "# LangChain",
      "Building applications with LLMs through composability",
      "Looking for the JS/TS version? Check out LangChain.js.",
      "**Production Support:** As you move your LangChains into production, we'd love to offer more comprehensive support.",
      "Please fill out this form and we'll set up a dedicated support Slack channel.",
      "## Quick Install",
      "`pip install langchain`",
      "or",
      "`conda install langchain -c conda-forge`",
      "## 🤔 What is this?",
      "Large language models (LLMs) are emerging as a transformative technology, enabling developers to build applications that they previously could not. However, using these LLMs in isolation is often insufficient for creating a truly powerful app - the real power comes when you can combine them with other sources of computation or knowledge.",
      "This library aims to assist in the development of those types of applications. Common examples of these applications include:",
      "**❓ Question Answering over specific documents**",
      "- Documentation",
      "- End-to-end Example: Question Answering over Notion Database",
      "**🤖 Agents**",
      "- Documentation",
      "- End-to-end Example: GPT+WolframAlpha",
      "## 📖 Documentation",
      "Please see [here](https://python.langchain.com) for full documentation on:",
      "- Getting started (installation, setting up the environment, simple examples)",
      "- How-To examples (demos, integrations, helper functions)",
      "- Reference (full API docs)",
      "- Resources (high-level explanation of core concepts)",
      "```"
    ]
  }
}